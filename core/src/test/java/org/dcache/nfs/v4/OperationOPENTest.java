package org.dcache.nfs.v4;

import static org.dcache.nfs.v4.NfsTestUtils.createClient;
import static org.dcache.nfs.v4.NfsTestUtils.execute;
import static org.dcache.nfs.v4.NfsTestUtils.generateRpcCall;
import static org.dcache.nfs.v4.xdr.nfs4_prot.OPEN4_SHARE_ACCESS_READ;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

import javax.security.auth.Subject;

import org.dcache.nfs.status.AccessException;
import org.dcache.nfs.status.GraceException;
import org.dcache.nfs.v4.xdr.COMPOUND4args;
import org.dcache.nfs.v4.xdr.COMPOUND4res;
import org.dcache.nfs.v4.xdr.nfs_fh4;
import org.dcache.nfs.vfs.DummyVFS;
import org.dcache.nfs.vfs.Inode;
import org.dcache.nfs.vfs.Stat;
import org.dcache.nfs.vfs.VirtualFileSystem;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class OperationOPENTest {

    private NFSv4StateHandler sh;
    private VirtualFileSystem vfs;
    private Inode fsRoot;
    private NFS4Client client;
    private NFSv41Session session;
    private OpenCloseTrackerTester openCloseTracker;

    @Before
    public void setUp() throws IOException {
        openCloseTracker = new OpenCloseTrackerTester();
        sh = new NFSv4StateHandler(openCloseTracker);
        vfs = new DummyVFS();
        fsRoot = vfs.getRootInode();
        client = createClient(sh);
        session = client.createSession(1, 8196, 8192, 128, 16);
    }

    @After
    public void tearDown() {
        openCloseTracker.tearDown();
    }

    @Test(expected = GraceException.class)
    public void testClientNeedGrace() throws Exception {
        openCloseTracker.expectUponTeardownNumOpenNew(0);
        openCloseTracker.expectUponTeardownNumOpenAlreadyOpen(0);
        openCloseTracker.expectUponTeardownNumClose(0);

        COMPOUND4args openArgs = new CompoundBuilder()
                .withSequence(false, session.id(), 0, 0, 1)
                .withPutfh(new nfs_fh4(fsRoot.toNfsHandle()))
                .withOpen("file", 1, client.getId(), OPEN4_SHARE_ACCESS_READ)
                .build();

        CompoundContext context = new CompoundContextBuilder()
                .withStateHandler(sh)
                .withFs(vfs)
                .withMinorversion(1)
                .withCall(generateRpcCall())
                .build();

        execute(context, openArgs);
    }

    @Test
    public void testReturnFhOnOpen() throws Exception {

        client.reclaimComplete();

        COMPOUND4args openArgs = new CompoundBuilder()
                .withSequence(false, session.id(), 0, 0, 1)
                .withPutfh(new nfs_fh4(fsRoot.toNfsHandle()))
                .withOpen("file", 1, client.getId(), OPEN4_SHARE_ACCESS_READ)
                .withGetfh()
                .build();

        CompoundContext context = new CompoundContextBuilder()
                .withStateHandler(sh)
                .withFs(vfs)
                .withMinorversion(1)
                .withCall(generateRpcCall())
                .build();

        Inode inode = vfs.create(fsRoot, Stat.Type.REGULAR, "file", new Subject(), 0644);
        COMPOUND4res res = execute(context, openArgs);

        assertEquals("wrong file handle", inode, Inode.forNfsHandle(res.resarray.get(3).opgetfh.resok4.object.value));

        assertEquals(1, openCloseTracker.getNumOpen());
    }

    @Test
    public void testReturnNewFhOnCreate() throws Exception {

        client.reclaimComplete();

        COMPOUND4args openArgs = new CompoundBuilder()
                .withSequence(false, session.id(), 0, 0, 1)
                .withPutfh(new nfs_fh4(fsRoot.toNfsHandle()))
                .withOpenCreate("file", 1, client.getId(), OPEN4_SHARE_ACCESS_READ)
                .withGetfh()
                .build();

        CompoundContext context = new CompoundContextBuilder()
                .withStateHandler(sh)
                .withFs(vfs)
                .withMinorversion(1)
                .withCall(generateRpcCall())
                .build();

        COMPOUND4res res = execute(context, openArgs);
        assertTrue("bad file handle", res.resarray.get(3).opgetfh.resok4.object.value.length > 0);

        assertEquals(1, openCloseTracker.getNumOpen());
    }

    @Test(expected = AccessException.class)
    public void testOpenPrevented() throws Exception {
        openCloseTracker.expectUponTeardownNumOpenNew(1);
        openCloseTracker.expectUponTeardownNumOpenAlreadyOpen(0);

        client.reclaimComplete();

        COMPOUND4args openArgs = new CompoundBuilder()
                .withSequence(false, session.id(), 0, 0, 1)
                .withPutfh(new nfs_fh4(fsRoot.toNfsHandle()))
                .withOpen("file", 1, client.getId(), OPEN4_SHARE_ACCESS_READ)
                .withGetfh()
                .build();

        CompoundContext context = new CompoundContextBuilder()
                .withStateHandler(sh)
                .withFs(vfs)
                .withMinorversion(1)
                .withCall(generateRpcCall())
                .build();

        vfs.create(fsRoot, Stat.Type.REGULAR, "file", new Subject(), 0644);

        openCloseTracker.setPreventOpen(true);
        execute(context, openArgs);

        assertEquals(1, openCloseTracker.getNumOpen());
    }

}
